@page "/configurefeeds"
@using ExploreGetRssFeed.Models
@using ExploreGetRssFeed.Services
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@inject IConfiguration Configuration
@inject ILogger<ConfigureFeeds> _logger
@inject IRssDataAccess _rssDataAccess

@rendermode InteractiveServer

<h3 class="text-center">Configure Feeds</h3>

<h4 class="text-center mb-3">Fill out the form to create a new feed</h4>

<EditForm EditContext="_editContext" OnSubmit="HandleFormSubmission" class="container-md text-center">
    <div class="row justify-content-md-center my-2">
        <label for="Title" class="col">Friendly name for this feed</label>
        <InputText class="col" id="Title" @bind-Value="NewFeed!.Title" />
        <ValidationMessage For="@(() => NewFeed!.Title)" />
    </div>

    <div class="row justify-content-md-center my-2">
        <label for="Url" class="col">Enter the feed address</label>
        <InputText class="col" id="Url" @bind-Value="NewFeed!.WebAddress" />
        <ValidationMessage For="@(()=>NewFeed!.WebAddress)" />
    </div>

    <div class="row justify-content-md-center my-2">
        <div class="col"></div>
        <button class="btn btn-primary col" type="submit" 
        disabled="@(!_editContext!.Validate())">
            @(FeedToEdit is null ? AddItemButtonText : UpdateItemButtonText)
        </button>
    </div>

    <div class="row justify-content-md-center my-3">
        <DataAnnotationsValidator />
    </div>

</EditForm>

<h3 class="text-center">Existing Feeds</h3>

@if (RssFeeds.Count < 1)
{
    <h4 class="text-center">There are no feeds yet</h4>
    <p class="text-center">Add feeds using the form above.</p>
}
else
{
    <h4 class="text-center">Feeds By Title, URL</h4>

    <div class="container-md text-center mb-3">
        @foreach (var feedItem in RssFeeds.ToList())
        {
            <div class="row justify-content-md-center my-2">
                <h5 class="col">@(feedItem.Title)</h5>
                <button class="btn btn-outline-secondary col" 
                type="button" @onclick="@(() => HandleEditFeedItem(feedItem))">Edit</button>
                <button class="btn btn-danger d-inline col" 
                type="button" @onclick="@(() => HandleDeleteFeedItem(feedItem))">Delete</button>
            </div>
        }
    </div>
}

@code {
    [SupplyParameterFromForm]
    private FeedEntryModel NewFeed { get; set; } = new();

    private string AddItemButtonText => "Add This Feed";
    private string UpdateItemButtonText => "Update This Feed";
    private EditContext? _editContext;

    private FeedEntryModel? FeedToEdit { get; set; }
    private List<FeedEntryModel> RssFeeds { get; set; } = [];

    string ButtonText { get; set; } = "Add This Feed";

    /// <summary>
    /// Updates an existing Feed Item in the database and the Blazor Component state.
    /// </summary>
    /// <param name="feedItem"></param>
    /// <returns>void</returns>
    /// <exception cref="ArgumentException"></exception>
    private async Task HandleEditFeedItem(FeedEntryModel feedItem)
    {
        _logger.LogInformation("Entered HandleEditFeedItem method");

        if (string.IsNullOrWhiteSpace(feedItem.Title))
        {
            throw new ArgumentException("FeedEntryModel instance is missing Title property value.");
        }

        FeedToEdit = feedItem;
        NewFeed = await _rssDataAccess.GetByTitleAsync(feedItem.Title);
        _editContext = new EditContext(NewFeed);
    }

    private async Task HandleDeleteFeedItem(FeedEntryModel feedEntry)
    {
        if (feedEntry is null || string.IsNullOrWhiteSpace(feedEntry.Title))
        {
            _logger.LogWarning("Unable to delete a null item, returning no-op.");
            return;
        }

        int deleteCount = await _rssDataAccess.RemoveAsync(
            feedEntry.Title!
        );

        _logger.LogInformation("Feed deleted: {title}, {webaddr}, {pathurl}.",
            feedEntry.Title, feedEntry.WebAddress, FeedEntryModel.GetRouteName(feedEntry.Title));
        RssFeeds.Remove(feedEntry);
    }

    private async Task HandleFormSubmission(EditContext context)
    {
        if (!context.Validate())
        {
            _logger.LogError("Form submitted, validation failed.");
            return;
        }

        if (FeedToEdit is not null)
        {
            int updateReturnVal = await _rssDataAccess.UpdateAsync(FeedToEdit, NewFeed);
            _logger.LogInformation("Form submitted, validation passed, data updated (value: {updateReturnVal}).", updateReturnVal);
            FeedToEdit = null;
            NewFeed = new();
            _editContext = new EditContext(NewFeed);
            return;
        }

        _logger.LogInformation("HandleFormSubmission: NewFeed title {title}, web address {webaddress}, and path url {defaultfeeditemsbaseurl}", 
            NewFeed.Title, 
            NewFeed.WebAddress, 
            FeedEntryModel.DefaultDisplayFeedBaseUrl);

        int createReturnVal = await _rssDataAccess.CreateAsync(NewFeed.Title!, NewFeed.WebAddress!, FeedEntryModel.GetRouteName(NewFeed.Title!));
        
        _logger.LogInformation("Form submitted, validation passed, data stored (value: {createReturnVal}).", createReturnVal);

        RssFeeds.Add(NewFeed);
        NewFeed = new();
        _editContext = new EditContext(NewFeed);
    }

    protected override async Task OnParametersSetAsync()
    {
        // db data should be preferred over static configuration data
        var allEntries = await _rssDataAccess.GetAllAsync();
        int rssFeedsCount = allEntries.Count();
        _logger.LogInformation("Data access returned {Count} entries", rssFeedsCount);

        if (rssFeedsCount < 1)
        {
            _logger.LogWarning("If this is first-time-run in Release mode then ignore this warning.");
        }
        else
        {
            _logger.LogInformation("RssFeeds store already populated.");
        }

        var dateTimeStamp = DateTime.Now;
        RssFeeds = allEntries.ToList();

        // base is not customized so no need to call base.OnParametersSet()
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(NewFeed);
    }
}
