@page "/configurefeeds"
@using ExploreGetRssFeed.Models
@using ExploreGetRssFeed.Services
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@inject IConfiguration Configuration
@inject ILogger<ConfigureFeeds> _logger
@inject IRssDataAccess _rssDataAccess

@rendermode InteractiveServer

<h3>Configure Feeds</h3>

<p>Fill out the form to create a new feed</p>

<EditForm Model="NewFeed" OnSubmit="HandleFormSubmission">
    <div class="my-2">
        <label for="Title">Friendly name for this feed</label>
        <InputText class="mx-1" id="Title" @bind-Value="NewFeed!.Title" />
        <ValidationMessage For="@(() => NewFeed!.Title)" />
    </div>

    <div class="my-2">
        <label for="Url">Enter the feed address</label>
        <InputText class="mx-1" id="Url" @bind-Value="NewFeed!.WebAddress" />
        <ValidationMessage For="@(()=>NewFeed!.WebAddress)" />
    </div>

    <div class="my-2">
        <button class="btn btn-primary" type="submit">@(FeedToEdit is null ? AddItemButtonText : UpdateItemButtonText)</button>
    </div>

    <div class="my-2">
        <DataAnnotationsValidator />
    </div>

</EditForm>

<h4>Existing Feeds</h4>

@if (RssFeeds.Count < 1)
{
    <p>Add feeds using the form above.</p>
}
else
{
    <p>By Title, URL</p>

    @foreach (var feedItem in RssFeeds.ToList())
    {
        <div>
            <span>@(feedItem.Title)</span>
            <button class="btn btn-outline-secondary" type="button" @onclick="@(() => HandleEditFeedItem(feedItem))">Edit</button>
            <button class="btn btn-danger d-inline" type="button" @onclick="@(() => HandleDeleteFeedItem(feedItem))">Delete</button>
        </div>
    }

    <br />
}

@code {
    [SupplyParameterFromForm]
    private FeedEntryModel NewFeed { get; set; } = new();

    private string AddItemButtonText => "Add This Feed";
    private string UpdateItemButtonText => "Update This Feed";

    private FeedEntryModel? FeedToEdit { get; set; }
    private List<FeedEntryModel> RssFeeds { get; set; } = [];

    string ButtonText { get; set; } = "Add This Feed";

    private async Task HandleEditFeedItem(FeedEntryModel feedItem)
    {
        _logger.LogInformation("Entered HandleEditFeedItem method");

        if (feedItem is null || string.IsNullOrWhiteSpace(feedItem.Title))
        {
            // todo: Notify the user that the update could not be completed
            // and supply information on how to continue or correct the issue
            return;
        }
        FeedToEdit = feedItem;
        NewFeed = await _rssDataAccess.GetAsync(feedItem.Title);
    }

    private async Task HandleDeleteFeedItem(FeedEntryModel feedEntry)
    {
        _logger.LogInformation("Entered HandleDeleteFeedItem method.");

        int deleteCount = await _rssDataAccess.RemoveAsync(
            feedEntry.Title!
        );

        _logger.LogInformation("Feed deleted: {title}, {webaddr}, {pathurl}.",
            feedEntry.Title, feedEntry.WebAddress, feedEntry.PathUrl);
        RssFeeds.Remove(feedEntry);
    }

    private async Task HandleFormSubmission(EditContext context)
    {
        if (!context.Validate())
        {
            _logger.LogError("Form submitted, validation failed.");
            throw new InvalidOperationException("Form validation failed and somehow the form was submitted.");
        }

        if (FeedToEdit is not null)
        {
            int updateReturnVal = await _rssDataAccess.UpdateAsync(FeedToEdit, NewFeed);
            _logger.LogInformation("Form submitted, validation passed, data updated (value: {updateReturnVal}).", updateReturnVal);
            FeedToEdit = null;
            NewFeed = new();
            return;
        }

        int createReturnVal = await _rssDataAccess.CreateAsync(NewFeed.Title!, NewFeed.WebAddress!, NewFeed.PathUrl!);
        _logger.LogInformation("Form submitted, validation passed, data stored (value: {createReturnVal}).", createReturnVal);
        RssFeeds.Add(NewFeed);

        // todo: confirm that newing an instance does not cause a regression
        NewFeed = new();
    }

    protected override async Task OnParametersSetAsync()
    {
        // db data should be preferred over static configuration data
        var allEntries = await _rssDataAccess.GetAllAsync();
        int rssFeedsCount = allEntries.Count();
        _logger.LogInformation("Data access returned {Count} entries", rssFeedsCount);

        if (rssFeedsCount < 1)
        {
            _logger.LogWarning("If this is first-time-run in Release mode then ignore this warning.");
        }
        else
        {
            _logger.LogInformation("RssFeeds store already populated.");
        }

        var dateTimeStamp = DateTime.Now;
        RssFeeds = allEntries.ToList();

        // base is not customized so no need to call base.OnParametersSet()
    }
}
