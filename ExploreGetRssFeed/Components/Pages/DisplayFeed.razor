@page "/displayfeed/{feedTitle}"

@using ExploreGetRssFeed.Models
@using System.Xml.Linq
@using ExploreGetRssFeed.Services
@using Microsoft.AspNetCore.Components
@using ExploreGetRssFeed.Components.Fragments
@using Microsoft.Extensions.Caching.Memory

@inject IMemoryCache MemoryCache
@inject IHttpClientFactory ClientFactory
@inject ILogger<DisplayFeed> _logger
@inject IRssDataAccess _rssDataAccess

@attribute [StreamRendering]

<h3 class="text-center">Recent RSS Feeds</h3>

<section>
    @if (FeedItems is null)
    {
        if (ApiError)
        {
            <h4>Error</h4>
            <p>An error occurred while fetching the stream. Try again later.</p>
        }
        else
        {
            <p><em>Loading. . .</em></p>
        }
    }
    else
    {
        @foreach (var item in FeedItems)
        {
            <FeedItemRow FeedItem="@item" />
        }
    }
</section>

@code {
    [Parameter]
    public string FeedTitle { get; set; } = string.Empty;

    private const string NAMED_HTTP_CLIENT = "RssClient";
    private string FeedContent { get; set; } = string.Empty;
    private bool ApiError { get; set; }
    private bool OpenInNewTab = false;
    private IEnumerable<FeedModel>? FeedItems { get; set; }

    private DateTime LastFetchTime { get; set; } = DateTime.MinValue;
    private TimeSpan CacheDuration => TimeSpan.FromHours(1);

    public async Task GetFeed(string targetUrl)
    {
        _logger.LogInformation("Entered GetFeed()");

        // get memorycache as a tuple and assign to cacheEntry variable
        if (MemoryCache.TryGetValue(targetUrl, 
            out (IEnumerable<FeedModel> Items, 
                DateTime LastFetchTime) cacheEntry))
        {
            if ((DateTime.Now - cacheEntry.LastFetchTime) < CacheDuration)
            {
                _logger.LogInformation("Cache is not expired, displaying cached content.");
                FeedItems = cacheEntry.Items;
                ApiError = false;
                return;
            }
        }

        var request = new HttpRequestMessage(HttpMethod.Get, targetUrl);
        var client = ClientFactory.CreateClient(NAMED_HTTP_CLIENT);
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            FeedContent = await response.Content.ReadAsStringAsync();
            ProcessXml();
            MemoryCache.Set(targetUrl, (FeedItems, DateTime.Now), CacheDuration);
        }
        else
        {
            ApiError = true;
            _logger.LogError("ApiClient response was an unsuccessful status code: {statuscode}", response.StatusCode);
        }
    }

    private void ProcessXml()
    {
        var xdoc = XDocument.Parse(FeedContent);
        var items = xdoc.Descendants("item");

        try
        {
            _logger.LogInformation("Processing XML.");

            FeedItems = items.Select(item => FeedModel.Create(
                item.Element("title")?.Value ?? "Untitled",
                item.Element("link")?.Value ?? string.Empty,
                item.Element("pubDate")?.Value ?? DateTime.Now.ToString(),
                item.Element("description")?.Value ?? string.Empty,
                OpenInNewTab
                ));
            ApiError = false;
        }
        catch (Exception ex)
        {
            _logger.LogError("Error processing xml: {err}", ex.Message);
            _logger.LogError("Inner errorr info: {innererr}", ex.InnerException);
            ApiError = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        FeedEntryModel entry = await _rssDataAccess.GetByTitleAsync(FeedTitle);
        OpenInNewTab = entry.OpenInNewTab;

        if (entry is not null && entry.WebAddress is not null)
        {
            string feedUrl = entry.WebAddress ?? string.Empty;
            _logger.LogInformation("Rss Feed Web Address resolved to {furl}", feedUrl);

            if (string.IsNullOrWhiteSpace(feedUrl) == false)
            {
                await GetFeed(feedUrl);
            }
            else
            {
                _logger.LogError("Rss Feed Web Address was empty!");
            }
        }
        else
        {
            _logger.LogError("Rss Feed item was null!");
        }

        base.OnParametersSet();
    }
}
