@page "/viewfeeds"

@using ExploreGetRssFeed.Models
@using ExploreGetRssFeed.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ILogger<ViewFeeds> _logger
@inject IRssDataAccess _rssDataAccess
@inject NavigationManager NavManager

@rendermode InteractiveServer

<h3>Your Feeds</h3>

@if(Feeds is null)
{
    <p><em>Loading . . .</em></p>
}
else
{
    <p>Click a feed title to load recent feed items</p>

    <div class="container">
        <div class="col">
            <div class="row">
                @for (int idx = 0; idx < Feeds.Count(); idx++)
                {
                    var feed = Feeds.ElementAt(idx);
                    <button type="button" @onclick="@(()=>HandleNavManager(feed))">@feed.Title</button>
                }
            </div>
        </div>
    </div>
}

@code {
    public IQueryable<FeedEntryModel>? Feeds { get; set; }

    private void HandleNavManager(FeedEntryModel feedEntryItem)
    {
        string targetSlug = FeedEntryModel.GetRouteName(feedEntryItem.Title!);
        NavManager.NavigateTo(targetSlug);
    }

    protected override async void OnParametersSet()
    {
        _logger.LogInformation("OnParametersSet: Loading feeds from DB.");

        var feedEntryModels = await _rssDataAccess.GetAllAsync();

        foreach(var feed in feedEntryModels)
        {
            _logger.LogInformation(
                "Fetched FeedModel instance Title {title}, WebAddress {link}, generated Slug Url {slugurl}", 
                feed.Title, feed.WebAddress, FeedEntryModel.GetRouteName(feed.Title!));
        }

        Feeds = feedEntryModels.AsQueryable<FeedEntryModel>();
    }
}
